@model Activity
@{
    ViewData["Title"] = Model.Title;
    var isRegistered = ViewBag.IsRegistered as bool? ?? false;
    var hasLiked = ViewBag.HasLiked as bool? ?? false;
    var canRegisterFree = ViewBag.CanRegisterFree as bool? ?? false; // New ViewBag for free registration
}

<div class="row">
    <div class="col-lg-8">
        <!-- Activity Image -->
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <img src="@Model.ImageUrl" class="img-fluid rounded mb-4" alt="@Model.Title" style="width: 100%; height: 400px; object-fit: cover;">
        }
        else
        {
            <div class="bg-light rounded d-flex align-items-center justify-content-center mb-4" style="height: 400px;">
                <i class="fas fa-image fa-5x text-muted"></i>
            </div>
        }

        <!-- Activity Content -->
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-start mb-3">
                    <h1 class="card-title">@Model.Title</h1>
                    <div>
                        @if (Model.Type == "free")
                        {
                            <span class="badge bg-success fs-6">Miễn phí</span>
                        }
                        else
                        {
                            <span class="badge bg-dark fs-6">Trả phí</span>
                        }
                        @if (Model.IsFull)
                        {
                            <span class="badge bg-danger fs-6 ms-1">Đầy</span>
                        }
                        else if (!Model.IsActive)
                        {
                            <span class="badge bg-warning fs-6 ms-1">Đóng</span>
                        }
                    </div>
                </div>

                @if (Model.Type == "paid")
                {
                    <h2 class="text-primary fw-bold mb-3">@Model.Price.ToString("N0") VND</h2>
                }
                else
                {
                    <h2 class="text-success fw-bold mb-3">Miễn phí</h2>
                }

                <p class="lead">@Model.Description</p>

                @if (!string.IsNullOrEmpty(Model.Skills))
                {
                    <div class="mb-3">
                        <h5><i class="fas fa-star text-warning"></i> Kỹ năng đạt được:</h5>
                        <p>@Model.Skills</p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(Model.Requirements))
                {
                    <div class="mb-3">
                        <h5><i class="fas fa-exclamation-circle text-info"></i> Yêu cầu:</h5>
                        <p>@Model.Requirements</p>
                    </div>
                }

                <!-- Activity Info -->
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="info-item mb-3">
                            <i class="fas fa-calendar text-primary me-2"></i>
                            <strong>Thời gian:</strong> @Model.StartDate.ToString("dd/MM/yyyy") - @Model.EndDate.ToString("dd/MM/yyyy")
                        </div>
                        <div class="info-item mb-3">
                            <i class="fas fa-clock text-primary me-2"></i>
                            <strong>Giờ học:</strong> @Model.StartTime.ToString(@"hh\:mm") - @Model.EndTime.ToString(@"hh\:mm")
                        </div>
                        <div class="info-item mb-3">
                            <i class="fas fa-map-marker-alt text-primary me-2"></i>
                            <strong>Địa điểm:</strong> @Model.Location
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="info-item mb-3">
                            <i class="fas fa-users text-primary me-2"></i>
                            <strong>Số lượng:</strong> @Model.CurrentParticipants / @Model.MaxParticipants người
                        </div>
                        <div class="info-item mb-3">
                            <i class="fas fa-child text-primary me-2"></i>
                            <strong>Độ tuổi:</strong> @Model.MinAge - @Model.MaxAge tuổi
                        </div>
                        @if (Model.Teacher != null)
                        {
                            <div class="info-item mb-3">
                                <i class="fas fa-chalkboard-teacher text-primary me-2"></i>
                                <strong>Giáo viên:</strong> @Model.Teacher.FullName
                                @if (!string.IsNullOrEmpty(Model.Teacher.Specialization))
                                {
                                    <br><small class="text-muted">Chuyên môn: @Model.Teacher.Specialization</small>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="d-flex gap-2 mb-4">
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <!-- Like Button -->
                        <button class="btn btn-outline-danger" onclick="toggleLike(@Model.ActivityId)" id="likeBtn">
                            <i class="@(hasLiked ? "fas" : "far") fa-heart"></i>
                            <span id="likeCount">@Model.LikesCount</span> Thích
                        </button>

                        @if (isRegistered)
                        {
                            <span class="btn btn-success disabled">
                                <i class="fas fa-check"></i> Đã đăng ký
                            </span>
                        }
                        else if (Model.IsFull)
                        {
                            <span class="btn btn-secondary disabled">
                                <i class="fas fa-users"></i> Đã đầy
                            </span>
                        }
                        else if (!Model.IsActive)
                        {
                            <span class="btn btn-secondary disabled">
                                <i class="fas fa-lock"></i> Đã đóng
                            </span>
                        }
                        else
                        {
                            @if (Model.Type == "free")
                            {
                                <!-- Register Button for Free Activities -->
                                <form asp-action="RegisterFree" method="post" class="d-inline">
                                    <input type="hidden" name="activityId" value="@Model.ActivityId" />
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-success">
                                        <i class="fas fa-user-plus"></i> Đăng ký miễn phí
                                    </button>
                                </form>
                            }
                            else // Paid activity
                            {
                                <!-- Add to Cart for Paid Activities -->
                                <form asp-controller="Cart" asp-action="AddToCart" method="post" class="d-inline">
                                    <input type="hidden" name="activityId" value="@Model.ActivityId" />
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-primary">
                                        <i class="fas fa-shopping-cart"></i> Thêm vào giỏ hàng
                                    </button>
                                </form>
                            }
                        }
                    }
                    else
                    {
                        <a asp-controller="Account" asp-action="Login" class="btn btn-primary">
                            <i class="fas fa-sign-in-alt"></i> Đăng nhập để đăng ký
                        </a>
                    }
                </div>

                <!-- Comments Section -->
                @if (User.Identity?.IsAuthenticated == true)
                {
                    <div class="mb-4">
                        <h5>Bình luận</h5>
                        <form onsubmit="submitComment(event, @Model.ActivityId)">
                            @Html.AntiForgeryToken()
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Viết bình luận..." id="commentInput" required>
                                <button class="btn btn-outline-primary" type="submit">
                                    <i class="fas fa-paper-plane"></i> Gửi
                                </button>
                            </div>
                        </form>
                    </div>
                }

                <!-- Display Comments -->
                <div id="commentsSection">
                    @if (Model.Interactions != null && Model.Interactions.Any(i => i.InteractionType == "Comment"))
                    {
                        <h6>Bình luận (@Model.CommentsCount)</h6>
                        @foreach (var comment in Model.Interactions.Where(i => i.InteractionType == "Comment").OrderByDescending(i => i.CreatedAt))
                        {
                            <div class="comment-item border-bottom pb-2 mb-2">
                                <div class="d-flex justify-content-between">
                                    <strong>@(comment.User?.FullName ?? comment.User?.UserName ?? "Người dùng")</strong>
                                    <small class="text-muted">@comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                </div>
                                <p class="mb-0">@comment.Content</p>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">Chưa có bình luận nào. Hãy là người đầu tiên bình luận!</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Sidebar -->
    <div class="col-lg-4">
        <div class="card sticky-top">
            <div class="card-header">
                <h5 class="mb-0">Thông tin hoạt động</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="progress mb-2">
                        <div class="progress-bar" role="progressbar" style="width: @(Model.MaxParticipants > 0 ? (Model.CurrentParticipants * 100 / Model.MaxParticipants) : 0)%"></div>
                    </div>
                    <small class="text-muted">@Model.CurrentParticipants / @Model.MaxParticipants người đã đăng ký</small>
                </div>

                <div class="mb-3">
                    <i class="fas fa-heart text-danger me-2"></i>
                    <span id="sidebarLikeCount">@Model.LikesCount</span> lượt thích
                </div>

                <div class="mb-3">
                    <i class="fas fa-comment text-primary me-2"></i>
                    <span id="sidebarCommentCount">@Model.CommentsCount</span> bình luận
                </div>

                @if (Model.Creator != null)
                {
                    <div class="mb-3">
                        <small class="text-muted">Được tạo bởi: @Model.Creator.FullName</small><br>
                        <small class="text-muted">Ngày tạo: @Model.CreatedAt.ToString("dd/MM/yyyy")</small>
                    </div>
                }

                @if (User.IsInRole("Admin"))
                {
                    <hr>
                    <div class="admin-actions">
                        <h6>Hành động quản trị</h6>
                        <a asp-action="Edit" asp-route-id="@Model.ActivityId" class="btn btn-sm btn-outline-primary">Chỉnh sửa</a>
                        <a asp-action="Delete" asp-route-id="@Model.ActivityId" class="btn btn-sm btn-outline-danger" 
                           onclick="return confirm('Bạn có chắc muốn xóa hoạt động này?')">Xóa</a>
                    </div>
                }
            </div>
        </div>

        <!-- Related Activities -->
        <div class="card mt-4">
            <div class="card-header">
                <h6 class="mb-0">Hoạt động liên quan</h6>
            </div>
            <div class="card-body">
                <p class="text-muted">Các hoạt động tương tự sẽ được hiển thị ở đây.</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleLike(activityId) {
            const token = $('input[name="__RequestVerificationToken"]').val();
            
            fetch('@Url.Action("Like", "Activity")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token // Send token in header
                },
                body: 'activityId=' + activityId + '&__RequestVerificationToken=' + encodeURIComponent(token) // Send token in body
            })
            .then(response => response.json())
            .then(data => {
                console.log('Like response:', data); // Thêm dòng này
                if (data.success) {
                    document.getElementById('likeCount').textContent = data.likesCount;
                    document.getElementById('sidebarLikeCount').textContent = data.likesCount;
                    const heartIcon = document.querySelector('#likeBtn i');
                    if (data.hasLiked) {
                        heartIcon.classList.remove('far');
                        heartIcon.classList.add('fas');
                    } else {
                        heartIcon.classList.remove('fas');
                        heartIcon.classList.add('far');
                    }
                } else {
                    alert(data.message || 'Đã xảy ra lỗi. Vui lòng thử lại.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Đã xảy ra lỗi. Vui lòng thử lại.');
            });
        }

        function submitComment(event, activityId) {
            event.preventDefault();
            const content = document.getElementById('commentInput').value.trim();
            const token = $('input[name="__RequestVerificationToken"]').val();
            
            if (!content) {
                alert('Vui lòng nhập nội dung bình luận.');
                return;
            }
            
            fetch('@Url.Action("Comment", "Activity")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token // Send token in header
                },
                body: 'activityId=' + activityId + '&content=' + encodeURIComponent(content) + '&__RequestVerificationToken=' + encodeURIComponent(token) // Send token in body
            })
            .then(response => response.json())
            .then(data => {
                console.log('Comment response:', data); // Thêm dòng này
                if (data.success) {
                    // Add new comment to the list
                    const commentsSection = document.getElementById('commentsSection');
                    const newComment = `
                        <div class="comment-item border-bottom pb-2 mb-2">
                            <div class="d-flex justify-content-between">
                                <strong>${data.comment.userName}</strong>
                                <small class="text-muted">${data.comment.createdAt}</small>
                            </div>
                            <p class="mb-0">${data.comment.content}</p>
                        </div>
                    `;
                    
                    // If no comments before, replace the "no comments" message
                    if (commentsSection.innerHTML.includes('Chưa có bình luận nào')) {
                        commentsSection.innerHTML = '<h6>Bình luận (1)</h6>' + newComment;
                    } else {
                        // Insert after the header
                        const header = commentsSection.querySelector('h6');
                        if (header) {
                            header.insertAdjacentHTML('afterend', newComment);
                            // Update comment count in header
                            const currentCount = parseInt(header.textContent.match(/\d+/)[0]) + 1;
                            header.textContent = `Bình luận (${currentCount})`;
                        }
                    }
                    
                    // Update sidebar comment count
                    document.getElementById('sidebarCommentCount').textContent = data.commentsCount;
                    
                    // Clear input
                    document.getElementById('commentInput').value = '';
                } else {
                    alert(data.message || 'Đã xảy ra lỗi. Vui lòng thử lại.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Đã xảy ra lỗi. Vui lòng thử lại.');
            });
        }
    </script>
}
